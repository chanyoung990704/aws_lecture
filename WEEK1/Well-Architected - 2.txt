Well-Architected 모듈 2
	운영 우수성 원칙
		비즈니스 가치를 실현하고 지원 프로세스 및 절차를 지속적으로 개선하기 위해 시스템을 실행 및 모니터링
		중점 영역
			조직 / 준비 / 운영 / 진화
	운영 우수성 설계 원칙
		기존 환경에서 운영 우수성 과제
			수동 변경
			배치 변경
			게임 데이를 거의 실행 안함
			실수로부터 배울 시간 없음
			오래된 설명서 
		클라우드 환경에서 운영 우수성
			코드로 운영 수행
			취소 가능한 소규모 변경 자주 수행
			운영 절차 자주 개선
			장애 예측
			모든 운영 장애로부터 학습
	운영 우수성 : 조직
		운영 우선 순위 / 운영 모델 / 조직 문화
	
	조직 : 비즈니스 요구
		운영 우선 순위 설정에 비즈니스 및 개발 팀 참여
		운영 우선 순위를 설정할 경우 내부 및 외부 규정 준수 요구 사항 고려
		운영 우선 순위 간 절충을 고려하고 정보에 근거한 의사 결정
	운영 우수성 : 준비
		원격 측정 설계
		워크플로우 개선
		배포 위험 완화
		운영 준비 상태 파악
	준비 : 여러 환경 사용
		개발자에게 개별 샌드박스 및 개발 환경 제공
		코드형 인프라와 구성 관리 시스템을 사용하여 환경 배포
		환경이 프로덕션 단계에 접근함에 따라 통제 강화
		환경을 사용하지 않을 때는 해당 환경을 비활성화
	운영 우수성 : 운영
		워크로드 상태 이해
		운영 상태 이해
	운영 : 이벤트, 인시던트 및 문제 관리
		프로세스
			이벤트 - 관심 관측치
			인시던트 - 대응 필요한 이벤트
			문제 - 반복되거나 현재 해결할 수 없는 인시던트
		런북과 플레이북은 이벤트에 대한 에스컬레이션을 트리거하는 요소와 에스컬레이션 프로세스를 정의하고 각 작업의 소유자 식별해야 함
		사용자가 이용 중인 서비스가 이벤트 영향을 받거나 정상적 운영 상태로 복구되었을 경우 사용자에게 알려야 함
	운영 우수성 : 진화
		경험 통해 학습 / 개선 / 학습 공유
	진화 : 피드백 루프
		개선 영역 파악 / 필요한 경우 우선 순위 정하고 개선 / 운영 활동, 고객 경험, 비즈니스 및 개발 팀 기준으로 실행 / 개선 인지
	
	

Well-Architected 모듈 3
	보안
		위험 평가 및 완화 전략을 통해 정보, 시스템, 및 자산을 보호하는 동시에 비즈니스 가치를 제공하는 능력
		자격 증명 및 엑세스 관리 / 탐지 / 인프라 보호 / 데이터 보호 / 인시던트 대응
	클라우드 환경에서 보안 설계
		강력한 자격 증명 기반 구현
		세분화된 엑세스 제어 사용
		모든 계층에서 보안 적용
		보안 모범 사례 자동화
		보안 이벤트 및 자동화에 대비
	클라우드 기반의 보안 운영
		AWS 계정 / AWS Organaizations / AWS Control Tower
	인간 및 기계 자격 증명 관리
		AWS Identity and Access Management(IAM)
		강력한 로그인 메커니즘
		중앙 집중식 자격 증명 공급자
		보안 암호
		엑세스의 요구 사항 정의 / 최소한의 권한 부여 / 퍼블릭 및 교차 계정 엑세스 제한 / 권한을 지속적으로 줄임
		
	자격 증명 및 엑세스 관리 Amazon Cognito
		여러 로그인 공급자 지원
		고유한 사용자/장치
		보안 모범 사례의 구현 지원
	탐지 제어
		보안 이벤트를 탐지하거나 식별
		운영 기준을 설정하기 위한 수명 주기 제어
		제어 검사를 위한 내부 감사
		자동 알림
	탐지 : 잘못된 구성 탐지 및 대응 자동화
		AWS는 리소스 구성 변경 사항이 발생하면 이를 기록하고 AWS Config 서비스를 사용하여 구성하는 규칙과 비교하여 평가하는 방법을 제공
		AWS Config 적합성 팩을 사용하여 자동화된 문제 해결 기능과 결합된 규칙을 구성 => 잘못된 구성에 대한 대응 자동화
	인프라 보호
		모범 사례와 업계 또는 규제 의무를 준수하기 위해 필요한 제어 방법론 포함
		신뢰 경계 / 시스템 보안 구성 / 운영 체제 / 정잭 적용 지점
	인프라 보호 : 모든 계층에서 트래픽 제어
		아키텍처의 계층을 통해 네트워크 보안에 심층 방어 접근법 적용 가능
		엣지 서비스 사용 / 서브넷 사용
	인프라 보호 : 관리형 서비스 사용
		유지 관리를 줄이는 AWS 관리형 서비스 사용
		관리형 서비스는 기본 인스턴스 또는 컴퓨팅을 처리하므로 패치 및 강화 가능
		고객은 워크로드 보안에 집중 가능
	데이터 보호
		보유한 데이터를 식별 및 분류한 후 제어 수단과 패턴을 사용해 데이터 기밀성을 유지하는 동시에 데이터를 저장하거나 전송할 때도 무결성과 가용성 유지하는 것
		데이터 분류 / 데이터 수동 처리 최소화 / 전송 데이터 보호
	데이터 보호 : 데이터 암호화
	데이터 보호 : 데이터 수동 처리 최소화
		메커니즘을 통해 수동 처리 최소화
		지속적 통합 또는 지속적 배포 사용 / 필요한 제어 및 프로세스 확인 
	인시던트 대응
		보안 인시던트에 대응하여 보안 인시던트의 잠재적 영향을 완화하기 위한 프로세스 구성 방법
		엑세스 권한을 쉽게 얻을 수 있는 방법 / 사전 배포된 적합한 도구 / 정기적으로 게임 데이 수행 
		템플릿 기반 '클린룸'
			신뢰할 수 있는 환경을 생성하여 조사 수행

Well-Architected 모듈 4
	안정성 원칙
		워크로드가 의도한 기능을 원하는 시점에 올바르고 일관되게 수행할 수 있는 능력
		전체 수명 주기 동안 워크로드 작동 및 테스트하는 기능 포함
		인프라 또는 서비스 장애로부터 복구 / 컴퓨팅 리소스를 동적으로 확보하여 수요 충족 / 중단 완화
		기본 요소 / 워크로드 아키텍처 / 변경 관리 / 장애 관리
	기존 환경에서의 안정성
		장애로부터 수동 복구 / 복구 절차를 거의 테스트하지 않음 / 여러 개의 단일 장애 발생 지점 / 용량 추측할 필요 없음
	클라우드 환경에서의 안정성
		장애로부터 자동 복구 / 복구 절차 테스트 / 전체 워크로드 가용성을 높이도록 수평적 확장 / 용량 추정 필요 없음 / 변경 관리 자동화

	네트워크 토폴로지
		기본 요구 사항의 범위가 단일 워크로드 또는 프로젝트를 넘어섬
		시스템을 설계하기 전에 안정성에 영향을 미치는 기본 요구 사항 마련
		ex)데이터센터에 충분한 네트워크 대역폭 있어야 함
	서비스 할당량 및 제약 조건
		물리적 한계 및 리소스 제약 이해
			서비스 한도 / 서비스 할당량 / 고정된 제한
	워크로드 아키텍처 : 분산 시스템
		워크로드 서비스 아키텍처 설계 / 서비스 지향 아키텍처 또는 마이크로 서비스 / 장애를 예방하기 위한 아키텍처 설계 / 장애를 완화하기 위한 아키텍처 설계
	변경 관리 : 워크로드 모니터링
		동작 모니터링 / Amazon Simple Notification Service / 검토 / Amazon CloudWatch
	변경 관리 : 수요에 맞춰 자동 조정
		Auto Scaling
	변경 관리 : 배포
		런북 사용 / 테스트를 배포의 일부로 통합 / 변경 불가능한 인프라 사용 
	장애 관리 : 구성 요소 장애 극복
		장애를 인지하고 미래에 대응하고 예방하는 방법 파악
		자동화 / 분석 / 데이터 백업 / 복구
	장애 관리 : 장애 격리
		장애를 인지하고 미래에 대응하고 예방하는 방법 파악
		복수 가용 영역 / 필요한 경우 여러 AWS 리전 사용 / 격벽 아키텍처
	장애 관리 : 백업 및 재해 복구
		정의된 목표 / 백업 전략 / 정기적인 복구 테스트 / 자동화된 복구 / 정기적 검토
	장애 관리 : 안정성 테스트
		플레이북 사용 / 기능 및 성능 테스트 / 카오스 엔지니어링 사용

Well-Architected 모듈 5
	성능 효율성 원칙
		컴퓨팅 리소스를 효율적으로 사용하여 시스템 요구 사항 충족하고 수요가 변하고 기술이 진화함에 따라 이러한 효율성 유지하는 능력
		선택 / 검토 / 모니터링 / 절충
	기존 환경에서 성능 효율성
		모든 것에 대해 동일한 기술 사용
		로컬만 가능, 전역은 너무 어렵고 비용이 높음
		모든 서버를 관리하기 위해 직원들과 함께 많은 서버 사용
		실험하기 어려움
	클라우드 환경에서의 성능 효율성
		고급 기술 대중화
		몇 분 만에 전 세계에 배포
		서버 아키텍처 사용
		실험 빈도 높임
		기계적 동조 고려
	성능 효율성 : 선택
		특정 워크로드에 대한 최적의 서버 구성은 애플리케이션마다 다름
		적절한 리소스 유형 선택 / 벤치마크 및 로드 테스트 / 성능 모니터링
	선택 : 적절한리소스
		성능 개선 / 컴퓨팅, 스토리지, 데이터베이스 및 네트워킹 리소스 / 벤치마킹 / 로드 테스트 / 비용 예산 / 모니터링 및 알림
	성능 효율성 : 검토
		AWS가 새로운 리소스 유형 및 기능을 통해 혁신 지속함에 따라 선택 사항 계속 검토
	검토 : 로드 테스트
		AWS CloudFormation 사용하여 아키텍처를 코드로 정의
		위험도가 낮은 방식으로 기능 실험
	성능 효율성 : 모니터링
		성능을 모니터링
		자동화를 사용하면 다음 서비스를 통해 조치를 트리거 하여 성능 문제 해결
		Amazon CloudWatch / Amazon Kinesis / Amazon Simple Queue Service / AWS Lambda
	모니터링 : 성능 경보
	성능 효율성 : 절충
		공간이 처리 시간을 줄이기 위해 사용되는 위치 절충
		리소스 배치 / 읽기 전용 복제본 추가 / 영향 측정
	절충 : 근접성 및 캐싱
		콘텐츠 분산 네트워크
		데이터베이스 캐싱
		지연 시간 감소
		사전 모니터링 및 알림
		Amazon CloudFront / Amazon ElasticCache / Amazon RDS
		
Well-Architected 모듈 6
	비용 최적화 원칙
		가장 낮은 가격으로 비즈니스 성과 달성할 수 있는 능력
		클라우드 재무 관리 실천
		지출 및 사용량 인식
		비용 효율적인 리소스
		수요 및 공급 리소스 관리
		시간에 따른 최적화
		
	기존 환경에서의 비용 최적화 원칙
		비용을 중앙 집중화
		서버를 유지 관리할 직원 고용
		자본 지출을 중심으로 선행되는 비용 지불
		규모의 경제로 얻게 되는 이점 없음
		데이터 센터 운영에 비용 지출

	클라우드 환경에서의 비용 최적화 원칙
		클라우드 재무 관리 구현
		소비 모델 채택
		전반적인 효율성 측정
		획일적인 작업 부담에 비용 지출 중단
		지출 분석하고 귀속
		
	비용 최적화 : 비용 효율적인 리소스
		시스템에 적절한 인스턴스 및 리소스를 사용하는 것이 비용 절약의 핵심
	
	비용 효율적인 리소스 : 요금 모델
		온디맨드 인스턴스 / Savings Plan 및 예약 인스턴스 / 스팟 인스턴스 

	비용 효율적인 리소스 : 관리형 서비스
		사용 가능한 서비스 분석 / 관리형 AWS 서비스 활용 / 애플리케이션 수준의 서비스 고려 / 자동화를 통해 비용 절감

	비용 최적화 : 공급 및 수요 리소스 관리
		공급을 수요에 일치시키면 시스템에 대한 최저 비용 달성
		수요에 맞춰 리소스 프로비저닝 / AWS Auti Scaling / 모니터링 도구 / 벤치마킹
	수요 및 공급 리소스 관리 
		적절한 양의 리소스로 수요 및 공급 관리
		대기열 또는 버퍼를 이용해 수요 관리
		AWS Auto Scaling을 통해 적절한 양의 리소스 제공

	비용 최적화 : 지출 인식
		정확한 비용 분담을 통해 여러 서비스 또는 사업 부문에 대한 비용을 파악
		리소스에 태그 지정 / 프로젝트 수명주기 및 프로파일 애플리케이션 추적 / 사용량 및 지출 모니터링 / AWS Cost Explorer 사용 / 파트너 도구 사용
	지출 인식 : AWS Cost Explorer
	비용 최적화 : 시간에 따른 최적화
		최적의 비용 효율성을 계속 유지하도록 기존 아키텍처 결정을 재평가하는 것이 권장

Well-Architected 모듈 7
	Well-Architected 검토
		고객과 파트너에게 현재 AWS 모범 사례에 따라 워크로드를 검토하는 일관된 접근 방식을 제공하고 클라우드용 워크로드를 설계하는방법에 대한 조언 제공
		질문 / 정답 / 원칙
		운영 우수성 / 보안 / 안정성 / 성능 효율성 / 비용 최적화
	Well-Architected 검토의 의도
		감사 목적 아님 => 협업 통한 개선
		아키텍처 아스트로넛 아님 => 실용적이고 입증된 조언
		일회성 점검 아님 => 전체 수명 주기
	검토 학습 내용
		빠를 수록 좋음 / 고려되지 않은 의사 결정 / 대부분의 워크로드는 개선 가능
	검토 이점
		보다 신속한 구축 및 배포 / 위험 감소 또는 완화 / 정보에 근거한 의사 결정 / AWS 모범 사례 학습
	AWS Well-Architected 적용
		